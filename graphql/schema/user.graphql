type User implements Node {
  "Unique user ID"
  id: ID!

  "Unique username"
  username: String!

  "User email"
  email: String!

  "User kind"
  kind: UserKind!

  "User display name"
  displayName: String

  "User bio"
  bio: String

  "Time of creation"
  createdAt: Time!

  "Time of last update"
  updatedAt: Time!
}

type UserConnection {
  "User edges"
  edges: [UserEdge]

  "User nodes"
  nodes: [User]

  "Page info"
  pageInfo: PageInfo!
}

type UserEdge {
  "Pagination cursor"
  cursor: String!

  "User node"
  node: User
}

input UserInput {
  "Username"
  username: String!

  "User email"
  email: String!

  "User password"
  password: String!
}

input UserUpdateInput {
  "Username"
  username: String

  "User email"
  email: String

  "User password"
  password: String

  "User kind"
  kind: UserKind

  "User display name"
  displayName: String

  "User bio"
  bio: String
}

input UserFilter {
  "And"
  and: UserFilter

  "Or"
  or: UserFilter

  "User ID filter"
  id: IDFilter

  "Username filter"
  username: StringFilter

  "User email filter"
  email: StringFilter

  "User kind filter"
  kind: UserKindFilter

  "User display name filter"
  displayName: StringFilter

  "User bio filter"
  bio: StringFilter

  "Time of creation filter"
  createdAt: TimeFilter

  "Time of last update filter"
  updatedAt: TimeFilter
}

input UserKindFilter {
  "Equal"
  eq: UserKind

  "In"
  in: [UserKind]
}

enum UserKind {
  "Banned user"
  BANNED

  "Standard user"
  USER

  "User with admin permissions"
  ADMIN
}

enum UserSort {
  CREATED
  UPDATED
}

directive @isKind(
  kind: UserKind!
) on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION
