type File implements Node {
  "Unique file ID"
  id: ID!

  "Filename"
  filename: String!

  "File [mime type](https://www.iana.org/assignments/media-types/media-types.xhtml)"
  mimeType: String!

  "File extension"
  extension: String!

  "File size in bytes"
  size: Int64!

  "File tags"
  tags: [Tag!]

  "Time of creation"
  createdAt: Time!

  "Time of last update"
  updatedAt: Time!

  "Time of deletion"
  deletedAt: Time
}

type FileConnection {
  "File edges"
  edges: [FileEdge]

  "File nodes"
  nodes: [File]

  "Page info"
  pageInfo: PageInfo!
}

type FileEdge {
  "Pagination cursor"
  cursor: String!

  "File node"
  node: File
}

input FileInput {
  "Filename"
  filename: String!

  "IDs of tags which the file will be tagged"
  tags: [ID!]
}

input FileUpdateInput {
  "Filename"
  filename: String

  "IDs of tags which the file will be tagged"
  tags: [ID!]
}

input FileFilter {
  "And"
  and: FileFilter

  "Or"
  or: FileFilter

  "File ID filter"
  id: IDFilter

  "Filename filter"
  filename: StringFilter

  "File [mime type](https://www.iana.org/assignments/media-types/media-types.xhtml) filter"
  mimeType: StringFilter

  "File extension filter"
  extension: StringFilter

  "File size filter"
  size: Int64Filter

  "Time of creation filter"
  createdAt: TimeFilter

  "Time of last update filter"
  updatedAt: TimeFilter

  "Time of deletion filter"
  deletedAt: TimeFilter
}

type DeleteFilePayload {
  "Unique file ID"
  id: ID!

  "Time of deletion"
  deletedAt: Time!
}

type RemoveTagsFromFilePayload {
  "Updated file"
  file: File!

  "Removed tags"
  tags: [Tag!]!
}

enum FileSort {
  CREATED
  UPDATED
}
