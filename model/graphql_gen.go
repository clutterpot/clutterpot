// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Node interface {
	IsNode()
	GetID() string
}

type DeleteFilePayload struct {
	// Unique file ID
	ID string `json:"id"`
	// Time of deletion
	DeletedAt time.Time `json:"deletedAt"`
}

type FileFilter struct {
	// And
	And *FileFilter `json:"and"`
	// Or
	Or *FileFilter `json:"or"`
	// File ID filter
	ID *ScalarFilter[string] `json:"id"`
	// Filename filter
	Filename *ScalarFilter[string] `json:"filename"`
	// File [mime type](https://www.iana.org/assignments/media-types/media-types.xhtml) filter
	MimeType *ScalarFilter[string] `json:"mimeType"`
	// File extension filter
	Extension *ScalarFilter[string] `json:"extension"`
	// File size filter
	Size *ScalarFilter[int64] `json:"size"`
	// Time of creation filter
	CreatedAt *ScalarFilter[time.Time] `json:"createdAt"`
	// Time of last update filter
	UpdatedAt *ScalarFilter[time.Time] `json:"updatedAt"`
	// Time of deletion filter
	DeletedAt *ScalarFilter[time.Time] `json:"deletedAt"`
}

type LoginPayload struct {
	// Access token
	AccessToken string `json:"accessToken"`
	// Time of expiration
	ExpiresAt time.Time `json:"expiresAt"`
	// Refresh token
	RefreshToken string `json:"refreshToken"`
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor"`
	EndCursor       *string `json:"endCursor"`
}

type RefreshAccessTokenPayload struct {
	// Access token
	AccessToken string `json:"accessToken"`
	// Time of expiration
	ExpiresAt time.Time `json:"expiresAt"`
}

type RevokeRefreshTokenPayload struct {
	// Refresh token
	RefreshToken string `json:"refreshToken"`
	// Time of deletion
	DeletedAt time.Time `json:"deletedAt"`
}

type TagFilter struct {
	// And
	And *TagFilter `json:"and"`
	// Or
	Or *TagFilter `json:"or"`
	// Tag ID filter
	ID *ScalarFilter[string] `json:"id"`
	// Name filter
	Name *ScalarFilter[string] `json:"name"`
}

type UserFilter struct {
	// And
	And *UserFilter `json:"and"`
	// Or
	Or *UserFilter `json:"or"`
	// User ID filter
	ID *ScalarFilter[string] `json:"id"`
	// Username filter
	Username *ScalarFilter[string] `json:"username"`
	// User email filter
	Email *ScalarFilter[string] `json:"email"`
	// User kind filter
	Kind *ScalarFilter[UserKind] `json:"kind"`
	// User display name filter
	DisplayName *ScalarFilter[string] `json:"displayName"`
	// User bio filter
	Bio *ScalarFilter[string] `json:"bio"`
	// Time of creation filter
	CreatedAt *ScalarFilter[time.Time] `json:"createdAt"`
	// Time of last update filter
	UpdatedAt *ScalarFilter[time.Time] `json:"updatedAt"`
}

type Order string

const (
	OrderAsc  Order = "ASC"
	OrderDesc Order = "DESC"
)

var AllOrder = []Order{
	OrderAsc,
	OrderDesc,
}

func (e Order) IsValid() bool {
	switch e {
	case OrderAsc, OrderDesc:
		return true
	}
	return false
}

func (e Order) String() string {
	return string(e)
}

func (e *Order) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Order(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Order", str)
	}
	return nil
}

func (e Order) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
