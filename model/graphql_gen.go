// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type DeleteFilePayload struct {
	// Unique file ID
	ID string `json:"id"`
	// Time of deletion
	DeletedAt time.Time `json:"deletedAt"`
}

type LoginPayload struct {
	// Access token
	AccessToken string `json:"accessToken"`
	// Time of expiration
	ExpiresAt time.Time `json:"expiresAt"`
	// Refresh token
	RefreshToken string `json:"refreshToken"`
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor"`
	EndCursor       *string `json:"endCursor"`
}

type RefreshAccessTokenPayload struct {
	// Access token
	AccessToken string `json:"accessToken"`
	// Time of expiration
	ExpiresAt time.Time `json:"expiresAt"`
}

type RevokeRefreshTokenPayload struct {
	// Refresh token
	RefreshToken string `json:"refreshToken"`
	// Time of deletion
	DeletedAt time.Time `json:"deletedAt"`
}

type Order string

const (
	OrderAsc  Order = "ASC"
	OrderDesc Order = "DESC"
)

var AllOrder = []Order{
	OrderAsc,
	OrderDesc,
}

func (e Order) IsValid() bool {
	switch e {
	case OrderAsc, OrderDesc:
		return true
	}
	return false
}

func (e Order) String() string {
	return string(e)
}

func (e *Order) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Order(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Order", str)
	}
	return nil
}

func (e Order) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
